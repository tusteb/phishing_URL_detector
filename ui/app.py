import streamlit as st
import requests
import pandas as pd
from utils import is_valid_url_or_ip
import os
import requests

API_URL = os.getenv("API_URL", "http://localhost:8000")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Phishing URL Detector")

st.markdown("# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ —Ñ–∏—à–∏–Ω–≥")
st.markdown("–í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ IP, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.")

# –í–≤–æ–¥ URL/IP
url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ IP:")

if st.button("**–ü—Ä–æ–≤–µ—Ä–∏—Ç—å**", use_container_width=True):
    if not url:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ IP.")
    elif not is_valid_url_or_ip(url):
        st.error("‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ IP‚Äë–∞–¥—Ä–µ—Å.")
    else:
        # –ó–∞–ø—Ä–æ—Å –∫ /predict
        try:
            response = requests.get(f"{API_URL}/predict", params={"url": url})
            if response.status_code == 200:
                result = response.json()
            else:
                try:
                    error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                except Exception:
                    error_detail = response.text
                st.error(f"‚ùå –û—à–∏–±–∫–∞ API ({response.status_code}): {error_detail}")
                st.stop()
        except Exception as e:
            st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
            st.stop()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        st.markdown("## –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ–ª–∏")
        if result["prediction"] == 1:
            st.error("üü† –§–∏—à–∏–Ω–≥–æ–≤—ã–π URL")
        else:
            st.success("üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL")

        # –ú–µ—Ç—Ä–∏–∫–∞
        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{result['probability']*100:.1f}%")

        # –ö–Ω–æ–ø–∫–∞ "—Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        report = "\n".join([f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {result['url']}",
                            f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {'–§–∏—à–∏–Ω–≥' if result['prediction'] == 1 else '–ë–µ–∑–æ–ø–∞—Å–Ω–æ'}",
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['probability']*100:.1f}%",
                            f"–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω: {'–î–∞' if result.get('trusted') else '–ù–µ—Ç'}"])
        st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                           data=report,
                           file_name="report.txt",
                           mime="text/plain",
                           use_container_width=True)

        # –ó–∞–ø—Ä–æ—Å –∫ /explain
        try:
            explain_resp = requests.get(f"{API_URL}/explain", params={"url": url})
            if explain_resp.status_code == 200:
                explain_data = explain_resp.json()
                explanations = explain_data["explanations"]

                st.markdown("## –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
                if explain_data.get("trusted"):
                    st.markdown("‚úÖ URL –ø—Ä–∏–∑–Ω–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –¥–æ–º–µ–Ω –≤—Ö–æ–¥–∏—Ç –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.")

                # –¢–∞–±–ª–∏—Ü–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
                df = pd.DataFrame(explanations)
                df["emoji"] = df["color"].map({"green": "üü¢",
                                               "yellow": "üü°",
                                               "red": "üî¥"})
                df["value"] = df["value"].apply(lambda v: ", ".join(v) if isinstance(v, list) and len(v) > 0 else (0 if isinstance(v, list) else v))

                feature_descriptions = {"url_length": "–î–ª–∏–Ω–∞ URL",
                                        "num_dots": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∞–¥—Ä–µ—Å–µ",
                                        "num_special_chars": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (@, -, _, =, %, ?)",
                                        "entropy": "–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (—ç–Ω—Ç—Ä–æ–ø–∏—è)",
                                        "is_ip_address": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ IP –≤–º–µ—Å—Ç–æ –¥–æ–º–µ–Ω–∞",
                                        "num_subdomains": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤",
                                        "suspicious_keywords": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∞–¥—Ä–µ—Å–µ",
                                        "suspicious_path_keywords": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ø—É—Ç–∏",
                                        "tld": "–î–æ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (TLD)",
                                        "is_suspicious_tld": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞",
                                        "is_trusted_domain": "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω"}

                df_display = df[["emoji", "feature", "value"]].rename(columns={"emoji": "",
                                                                               "feature": "–ü—Ä–∏–∑–Ω–∞–∫",
                                                                               "value": "–ó–Ω–∞—á–µ–Ω–∏–µ"})
                df_display["–ü—Ä–∏–∑–Ω–∞–∫"] = df_display["–ü—Ä–∏–∑–Ω–∞–∫"].map(feature_descriptions)
                df_display["–ó–Ω–∞—á–µ–Ω–∏–µ"] = df_display["–ó–Ω–∞—á–µ–Ω–∏–µ"].astype(str)
                st.table(df_display)
            else:
                try:
                    error_detail = explain_resp.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                except Exception:
                    error_detail = explain_resp.text
                st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ ({explain_resp.status_code}): {error_detail}")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {e}")